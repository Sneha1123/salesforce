R E -> Representational
S -> State
T -> Transfer
External Application <---> SF
Transfer data in JSON or XML format
Not a protocol but a framework
Stateless
Its HTTP based and client-server
HTTP based means it follows standard HTTP methods like (HTTP methods are mapped to CRUD op.):
  Get -> read
  PUT/PATCH -> update
  POST-> create
  Remove -> delete
Receives response payload and status

***************************************************************************************
REST v/s SOAP
****************************************************************************************
Rest uses standard HTTP which is much simpler
REST permits both JSON and XML whereas SOAP only permits XML
REST allows better support for browser due to its support for JSON
REST has better performance and scalibility
REST reads can be cached, SOAP based reads cant be cached.
  
***************************************************************************************
Communicating with external system through SF using REST
**************************************************************************************
Connect through HTTP request and if any authentication is required then SF also provides an OAuth Authentication.

**************************************************************************************
Why use REST?
**************************************************************************************
All sObjects including standard and custom come with REST API
useful for custom interactions
Good for complex interaction in a single cell like:
  Inserting/updating multiple objects
  Calling external system
  Custom search intefaces can be done.
  
**************************************************************************************
JSON & XML formats
*************************************************************************************
JSON:
  {"Structure Name":[{"key":"value","key":"value"},{"key":"value","key":"value"}]}
  
  eg:
    {"employee":[{"name":"A","id":"1"},
      {"name":"B","id":"2"},
      {"name":"C","id":"3"}
    ]}
    
XML:
User defined Tags are used 
Employees here work as the structure name and employee gives info of each employee

  eg:
      <employees>
        <employee>
          <name>A</name>
          <id>1</id>
        </employee>
        <employee>
          <name>B</name>
          <id>2</id>
        </employee>
        <employee>
          <name>C</name>
          <id>3</id>
        </employee>
        
      </employees>

**************************************************************************************
Create a REST Resource
**************************************************************************************

--------------- READ/GET -> To get the cases associated with a particular account --------------
//@RestResource used at class level and enables you to expose an apex class as a REST resource
@RestResource(urlMapping='/CaseField/*') //CaseField id the url mapping we provide which is used in workbench -> /services/apexrest/CaseField?companyName=Edge+Communications
global with sharing class RESTCaseController {
   @HttpGet //as its a get request
    global static List<Case> getOpenCases(){
        String CName = RestContext.request.params.get('companyName');
        Account Acc = [select id, name from Account where name=:CName];
        List<Case> cc = [select id,status, Owner.Name from Case where Accountid=:Acc.Id];
        return cc;
    }
}

-------------------------------DELETE----------------------------------------------
//@HttpDelete annotation is to delete something in SF from outside of SF.
Using the same resource "CaseField" here

    @HttpDelete
    global static String deleteClosedCases(){
        String CName = RestContext.request.params.get('companyName');
        Account Acc = [select id, name from Account where name=:CName];
        List<Case> cc = [select id,status, Owner.Name from Case where Accountid=:Acc.Id and status ='Closed'];
        delete cc;
        return 'Closed Cases deleted';
    }

---------------------------------POST/CREATE----------------------------------------
 @HttpPost
    global static String CreateAccount(String AccName, String AccDesc){
	Account a = new Account();
        a.Name= AccName;
        a.Description = AccDesc;
        insert a;
        return 'account Created';
	        
    }
    
    
    
    // in Workbench - {"AccName":"TestRest","AccDesc":"Inserted via Rest"}
    
----------------------------PATCH/UPDATE----------------------------------------------

@HttpPatch
    global static String UpdateCases(String CaseId, String CaseStatus, String CaseNotes ){
        Case cc = [select Id, status, description from Case where Id=:CaseId ];
        cc.status = CaseStatus;
        cc.description += CaseNotes; //to add to the existing description rather than replacing
        update cc;
        return 'Case Updated';
    }


// in Workbench - {"CaseId":"5002v00002jt5wV","CaseStatus":"Working","CaseNotes":"Line2 added via Rest"}
