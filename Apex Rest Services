R E -> Representational
S -> State
T -> Transfer
External Application <---> SF
Transfer data in JSON or XML format
Not a protocol but a framework
Stateless
Its HTTP based and client-server
HTTP based means it follows standard HTTP methods like (HTTP methods are mapped to CRUD op.):
  Get -> read
  PUT/PATCH -> update
  POST-> create
  Remove -> delete
Receives response payload and status

***************************************************************************************
REST v/s SOAP
****************************************************************************************
Rest uses standard HTTP which is much simpler
REST permits both JSON and XML whereas SOAP only permits XML
REST allows better support for browser due to its support for JSON
REST has better performance and scalibility
REST reads can be cached, SOAP based reads cant be cached.
  
***************************************************************************************
Communicating with external system through SF using REST
**************************************************************************************
Connect through HTTP request and if any authentication is required then SF also provides an OAuth Authentication.

**************************************************************************************
Why use REST?
**************************************************************************************
All sObjects including standard and custom come with REST API
useful for custom interactions
Good for complex interaction in a single cell like:
  Inserting/updating multiple objects
  Calling external system
  Custom search intefaces can be done.
  
**************************************************************************************
JSON & XML formats
*************************************************************************************
JSON:
  {"Structure Name":[{"key":"value","key":"value"},{"key":"value","key":"value"}]}
  
  eg:
    {"employee":[{"name":"A","id":"1"},
      {"name":"B","id":"2"},
      {"name":"C","id":"3"}
    ]}
    
XML:
User defined Tags are used 
Employees here work as the structure name and employee gives info of each employee

  eg:
      <employees>
        <employee>
          <name>A</name>
          <id>1</id>
        </employee>
        <employee>
          <name>B</name>
          <id>2</id>
        </employee>
        <employee>
          <name>C</name>
          <id>3</id>
        </employee>
        
      </employees>

**************************************************************************************
Create a REST Resource
**************************************************************************************

--------------- READ/GET -> To get the cases associated with a particular account --------------
//@RestResource used at class level and enables you to expose an apex class as a REST resource
@RestResource(urlMapping='/CaseField/*') //CaseField id the url mapping we provide which is used in workbench -> /services/apexrest/CaseField?companyName=Edge+Communications
global with sharing class RESTCaseController {
   @HttpGet //as its a get request
    global static List<Case> getOpenCases(){
        String CName = RestContext.request.params.get('companyName');
        Account Acc = [select id, name from Account where name=:CName];
        List<Case> cc = [select id,status, Owner.Name from Case where Accountid=:Acc.Id];
        return cc;
    }
}

-------------------------------DELETE----------------------------------------------
//@HttpDelete annotation is to delete something in SF from outside of SF.
Using the same resource "CaseField" here

    @HttpDelete
    global static String deleteClosedCases(){
        String CName = RestContext.request.params.get('companyName');
        Account Acc = [select id, name from Account where name=:CName];
        List<Case> cc = [select id,status, Owner.Name from Case where Accountid=:Acc.Id and status ='Closed'];
        delete cc;
        return 'Closed Cases deleted';
    }

---------------------------------POST/CREATE----------------------------------------
 @HttpPost
    global static String CreateAccount(String AccName, String AccDesc){
	Account a = new Account();
        a.Name= AccName;
        a.Description = AccDesc;
        insert a;
        return 'account Created';
	        
    }
    
    
    
    // in Workbench - {"AccName":"TestRest","AccDesc":"Inserted via Rest"}
    
----------------------------PATCH/UPDATE----------------------------------------------

@HttpPatch
    global static String UpdateCases(String CaseId, String CaseStatus, String CaseNotes ){
        Case cc = [select Id, status, description from Case where Id=:CaseId ];
        cc.status = CaseStatus;
        cc.description += CaseNotes; //to add to the existing description rather than replacing
        update cc;
        return 'Case Updated';
    }


// in Workbench - {"CaseId":"5002v00002jt5wV","CaseStatus":"Working","CaseNotes":"Line2 added via Rest"}



****************************************************************************************
Complex REST API calls
****************************************************************************************
RestContext has two objects:
	Request - To send request to the Rest resource -> basically comes to the resource
	Response - To send response from the Rest Resource to the client.


@RestResource(urlMapping='/v1/ComplexAcc/*')
global with sharing class RestComplexController {

    @HttpGet
    global static Account GetAcc(){
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        String ac = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
        system.debug(ac);
        system.debug(req.requestURI.lastIndexOf('/')); // gives the position of last '/' and adding 1 to it gives the starting point of the substring
        Account acc = [select Id, Name from Account where Id=:ac];
        return acc;
        
    }
}

--------------------------------Version 2 of above resource-----------------------------------------------------
Resource code - https://github.com/deepikakhanna/SalesforceREST/blob/dkhannaRESTful/AccountRESTService_V3
Makes the rsponse more user friendly and instead of apex error gives error defined by us.
create a wrapper class with variables which can be replaced depending on the fact that the particular value exists or not.



@RestResource(urlMapping = '/v2/ComplexAcc/*')
global with sharing class RestComplexController2 {

        @HttpGet
    global static AccountWrapper GetAcc(){
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        AccountWrapper AcWr = new AccountWrapper();
        String accountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
        system.debug(accountId);
        List<Account> acc = [select Id, Name from Account where Id=:accountId];
        
    
    
    if(acc!= null && acc.size()>0){
        system.debug(acc+' if block');
       AcWr.Ac1 = acc[0];
        AcWr.status = 'Success';
        AcWr.Message = 'Account Found';
        
    }
    else{
        AcWr.Ac1 = null;
        system.debug(acc+' else block');
        AcWr.status = 'Error';
        AcWr.Message = 'Account not Found';
        res.statusCode = 404;
    }
    return AcWr;
    }
    global class AccountWrapper{
        public Account Ac1;
        public String status;
        public String Message;
        
        public AccountWrapper(){}
    }
}

------------------------------Version 3 of above resource------------------------------
Case 1- user knows the id ->/services/apexrest/v3/ComplexAcc/0012v00002z1wVU
Case 2 - User knows a part of the name starting with -> /services/apexrest/v3/ComplexAcc/accounts?Name=Ac

first check what is present after '/'
	case 1- search string
	case 2- id
		If case-1 then check whether its empty/null or not
			case 3- empty/null then give error message
			case 4- value present 
				if case 4- then check whether the value is present or not
					case 5- value found 
					case 6- value not found
		If case 2- then check whether its empty/null or not
			case 7- empty/null then give error message
			case 8- value present
				if case 8- then check whether the value is present or not
					case 9- value found
					case 10- value not found
					
					
				
			
@RestResource (urlMapping='/v3/ComplexAcc/*')
global with sharing class RestComplexController3 {

    @HttpGet
    global static AccountWrapper getAccounts(){
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        AccountWrapper AcWr = new AccountWrapper();
        String AccountId = req.requestURI.substring(req.requestURI.lastIndexOf('/')+1);
    	system.debug(AccountId);
        if(doSearch(AccountId)){
            system.debug('Do search was true'+AcWr);
            searchAccounts(req, res, AcWr);
            
        }
        else{
             system.debug('Do search was false'+AcWr);
            findAccount(res,AcWr, AccountId);
        }
        
        return Acwr;
    
        
    }
    
    private static boolean doSearch(String AccountId){
        if(AccountId == 'accounts'){
            system.debug('in dosearch if'+AccountId);
            return true;
        }
        else{
            system.debug('in dosearch else'+AccountId);
            return false;
        }
    }
    
    private static void searchAccounts(RestRequest req, RestResponse res, AccountWrapper AcWr){
    String searchTerm = req.params.get('Name');
        system.debug(searchTerm);
        system.debug('in searchAccounts after dosearch'+ searchTerm);
        if(searchTerm == null || searchTerm == '' ){
            system.debug('in if of dosearch where search term is null');
            //if value is empty or null
            AcWr.Status='Error';
            AcWr.Message='Please enter a value';
            res.statusCode = 400;
        }
        else{
             system.debug('in if of dosearch where search term is not null');
            //value entered
            String searchText = '%'+searchTerm+'%';
            system.debug(searchText);
            List<Account> AccList = [select Id, Name from Account where Name like:searchText];
            system.debug(AccList);
            if(AccList != null && AccList.size()>0){
                //if value is present in SF
                AcWr.Acc = AccList;
                AcWr.Status = 'Success';
                AcWr.Message = AccList.size()+'Accounts Found';
            }
            else{
                //no such accounts found
                AcWr.Status = 'Error';
                AcWr.Message = 'No such accounts found';
            }
        }
    }
    private static void findAccount(RestResponse res, AccountWrapper AcWr, String AccountId ){
        if(AccountId !=null|| AccountId !=''){
            List<Account> accountViaId = [select Id, Name from Account where Id=:AccountId ];
            if(accountViaId != null && accountViaId.size()>0){
                AcWr.Acc = accountViaId;
                 AcWr.Status = 'Success';
                 AcWr.Message = 'Found via id';
            }
            else{
            AcWr.Status = 'Error';
            AcWr.Message = 'Not Found';
            res.statusCode =404;
        }
        }
        else{
            AcWr.Status = 'Error';
            AcWr.Message = 'Please specify an ID';
        }
        
    }
    
    global class AccountWrapper{
        Public List<Account> Acc;
        Public String Status;
        Public String Message;
        
        public AccountWrapper(){
            Acc = new List<Account>();
        }
    }
}
